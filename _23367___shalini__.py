# -*- coding: utf-8 -*-
"""<23367>_<SHALINI>_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JJaOc78B7p1eIstRWYbVr0LnYkBBq5QB

**MINOR PROJECT**

# TASK-1

Global Air Pollution âœ’

ðŸ“Œ Tasks -

1.Show if there are any columns with missing values with their count.

2.Plot the distplot of 'AQI Value' vs 'AQI Category'.(kind-'kde')

3.Plot a stacked bar graph of 'Ozone AQI Value' vs 'AQI Category'.

4.Show the list of cities without a stated country. Fill the missing columns with 'Unknown'.

5.Plot the most represented countries in this dataset using a horizontal bar graph.
"""

from google.colab import drive
drive.mount('/content/drive')

"""## **1.*Show* if there are any columns with missing values with their count**

In this part just displaying missing part of col in our data
"""

data=!weget'/content/global air pollution dataset.csv (1).zip'

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('/content/global air pollution dataset.csv (1).zip')

data.shape

data.head(5)

missing_values_count = data.isnull().sum()

# Display columns with missing values and their count
columns_with_missing_values = missing_values_count[missing_values_count > 0]
print(columns_with_missing_values)

"""# **2.Plot the distplot of 'AQI Value' vs 'AQI Category'.(kind-'kde')**

In this I am plot the distribution of the 'AQI Value' variable against the 'AQI Category' variable using a kind of plot called a "distplot" with a kernel density estimation (KDE). The 'AQI Value' represents the air quality index value, and the 'AQI Category' represents the corresponding category of the air quality.

A KDE plot (Kernel Density Estimation plot) is a data visualization technique that displays the estimated probability density function of a continuous variable. It is commonly used to visualize the distribution of a dataset.
"""

sns.displot(data, x='AQI Value', hue='AQI Category', kind='kde')

# Set plot title and labels
plt.title('Distribution of AQI Value by AQI Category')
plt.xlabel('AQI Value')
plt.ylabel('Density')

# Display the plot
plt.show()

"""In this code, sns.displot() is used to create the distribution plot with a KDE. The 'AQI Value' column is plotted on the x-axis, and the 'AQI Category' column is used for coloring the plot. The kind='kde' argument specifies the KDE plot type.

 'hue' is a parameter in the sns.displot() function call. It is used to specify a categorical variable that will be used to distinguish and color the different levels or categories in the plot.

 by this we interpret most of country have good AQI value

# 3.Plot a stacked bar graph of 'Ozone AQI Value' vs 'AQI Category'.

Before moving to further let us understand what is stacked bar graph ?

A stacked bar graph is a type of bar graph or bar chart where the different categories of a variable are represented by stacked bars, each segment of the bar representing a sub-category or component of the overall category.

What is the logic in staked bar graph?

To create a stacked bar graph, we want to represent the cumulative ozone AQI value within each AQI category. So, we need to aggregate the ozone values for each category by calculating their sum.

The height of each bar represents the total ozone AQI value for that category. Within each bar, there will be stacked segments representing the individual contributions of ozone AQI values from different observations within that category.
"""

unique_values = data['AQI Category'].unique().tolist()
print(unique_values)

# Group the data by 'AQI Category' and calculate the sum of 'Ozone AQI Value' for each category
grouped_data = data.groupby(['AQI Category', 'Ozone AQI Value']).size().unstack()


# Get the unique categories and their corresponding ozone values
categories = grouped_data.index
ozone_values = grouped_data.values.T


# Set the figure size
plt.figure(figsize=(16, 5))

# Plot the stacked bar graph
plt.bar(categories, ozone_values[0], label='Ozone AQI Value 1')
plt.bar(categories, ozone_values[1], bottom=ozone_values[0], label='Ozone AQI Value 2')

# Set plot title and labels
plt.title("Stacked Bar Graph of Ozone AQI Value by AQI Category")
plt.xlabel("AQI Category")
plt.ylabel("Count")

# Display the plot
plt.show()

"""So by this we conclude that most of ozone AQI value is in the moderate category

# 4.Show the list of cities without a stated country. Fill the missing columns with 'Unknown'.
"""

data['Country'].shape

missing_values_count = data['Country'].isnull().sum()
print(missing_values_count)

missing_country = data[data['Country'].isnull()]


data.loc[missing_country.index, 'Country'] = 'Unknown'


cities_without_country = missing_country['City'].tolist()

# Display the list of cities without a stated country
print(cities_without_country)

"""so there are 427 city name in dataset without country name

# 5.Plot the most represented countries in this dataset using a horizontal bar graph.
"""

country_counts = data['Country'].value_counts()
country_counts

sorted_countries = country_counts.sort_values(ascending=False)

top_countries = sorted_countries.head(10)

plt.barh(top_countries.index, top_countries.values)
plt.title('Top 10 Most Represented Countries')
plt.xlabel('Count')
plt.ylabel('Country')

# Display the plot
plt.show()

"""so we conclude that most of the data was from us of america and india . most of city data was form us and india

# TASK-2

Perform following steps on the same dataset which you used for EDA.
Data Preprocessing (as per requirement)

Feature Engineering

Split dataset in train-test (80:20 ratio)

Model selection

Model training

Model evaluation

Fine-tune the Model

Make predictions

Summarize your model's performance by evaluation metrices
"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

data.head(5)

aqi_categories = ['Moderate', 'Good', 'Unhealthy for Sensitive Groups', 'Unhealthy', 'Very Unhealthy', 'Hazardous']
for category in aqi_categories:
    data[f'is_{category}'] = (data['AQI Category'] == category).astype(int)

features = ['AQI Value', 'CO AQI Value', 'Ozone AQI Value','NO2 AQI Value','PM2.5 AQI Value']
x = data[features]
y = data['is_Unhealthy']

x.shape

y.shape

X_train, X_test, y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state=42)

#creating model
model=LogisticRegression()
#train a model using training data
model.fit(X_train,y_train)

model.intercept_

model.coef_

y_pred = model.predict(X_test)

y_pred.shape

model.score(X_train,y_train)

model.score(X_test,Y_test)

from sklearn.metrics import r2_score

r2_score(Y_test,y_pred)

from sklearn.neighbors import KNeighborsClassifier

model = KNeighborsClassifier(n_neighbors=5)

model.fit(X_train, y_train)

model.predict(X_test)

Y_test

model.score(X_test, Y_test)

"""# **TEST SCORE 99.65% **"""

model.score(X_train, y_train)

"""***TRAIN SCORE 99.82%***

I have try logistic regression and to predict 'AQI category' with six feature mention above from code and code out we conclude that it score is quite good

# Conclusion of the project

So we can conclude from the data most of country have good AQI cataegory and most of the data is from United state of America and then from the India and this dataset also show the relation that AQI value depends on the AQI value of ozone ,AQI value co ,AQI value no .Although I feel linear regression and logistic regresion both are not that suitable model for this dataset but still we can go for logistic regression by converting AQI category into binary attributes and also work with KNN model
"""